// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: blogMicroservice.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogMicroservice_FindBlogById_FullMethodName       = "/server.BlogMicroservice/FindBlogById"
	BlogMicroservice_CreateBlog_FullMethodName         = "/server.BlogMicroservice/CreateBlog"
	BlogMicroservice_CreateComment_FullMethodName      = "/server.BlogMicroservice/CreateComment"
	BlogMicroservice_UpdateComment_FullMethodName      = "/server.BlogMicroservice/UpdateComment"
	BlogMicroservice_DeleteComment_FullMethodName      = "/server.BlogMicroservice/DeleteComment"
	BlogMicroservice_GetAllComments_FullMethodName     = "/server.BlogMicroservice/GetAllComments"
	BlogMicroservice_GetAllBlogComments_FullMethodName = "/server.BlogMicroservice/GetAllBlogComments"
)

// BlogMicroserviceClient is the client API for BlogMicroservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogMicroserviceClient interface {
	FindBlogById(ctx context.Context, in *BlogIdRequest, opts ...grpc.CallOption) (*BlogResponse, error)
	CreateBlog(ctx context.Context, in *BlogCreationRequest, opts ...grpc.CallOption) (*StringMessage, error)
	CreateComment(ctx context.Context, in *CommentCreationRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	UpdateComment(ctx context.Context, in *CommentUpdateRequest, opts ...grpc.CallOption) (*StringMessage, error)
	DeleteComment(ctx context.Context, in *CommentIdRequest, opts ...grpc.CallOption) (*StringMessage, error)
	GetAllComments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommentListResponse, error)
	GetAllBlogComments(ctx context.Context, in *BlogIdRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
}

type blogMicroserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogMicroserviceClient(cc grpc.ClientConnInterface) BlogMicroserviceClient {
	return &blogMicroserviceClient{cc}
}

func (c *blogMicroserviceClient) FindBlogById(ctx context.Context, in *BlogIdRequest, opts ...grpc.CallOption) (*BlogResponse, error) {
	out := new(BlogResponse)
	err := c.cc.Invoke(ctx, BlogMicroservice_FindBlogById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogMicroserviceClient) CreateBlog(ctx context.Context, in *BlogCreationRequest, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, BlogMicroservice_CreateBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogMicroserviceClient) CreateComment(ctx context.Context, in *CommentCreationRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, BlogMicroservice_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogMicroserviceClient) UpdateComment(ctx context.Context, in *CommentUpdateRequest, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, BlogMicroservice_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogMicroserviceClient) DeleteComment(ctx context.Context, in *CommentIdRequest, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, BlogMicroservice_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogMicroserviceClient) GetAllComments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommentListResponse, error) {
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, BlogMicroservice_GetAllComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogMicroserviceClient) GetAllBlogComments(ctx context.Context, in *BlogIdRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, BlogMicroservice_GetAllBlogComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogMicroserviceServer is the server API for BlogMicroservice service.
// All implementations must embed UnimplementedBlogMicroserviceServer
// for forward compatibility
type BlogMicroserviceServer interface {
	FindBlogById(context.Context, *BlogIdRequest) (*BlogResponse, error)
	CreateBlog(context.Context, *BlogCreationRequest) (*StringMessage, error)
	CreateComment(context.Context, *CommentCreationRequest) (*CommentResponse, error)
	UpdateComment(context.Context, *CommentUpdateRequest) (*StringMessage, error)
	DeleteComment(context.Context, *CommentIdRequest) (*StringMessage, error)
	GetAllComments(context.Context, *Empty) (*CommentListResponse, error)
	GetAllBlogComments(context.Context, *BlogIdRequest) (*CommentListResponse, error)
	mustEmbedUnimplementedBlogMicroserviceServer()
}

// UnimplementedBlogMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogMicroserviceServer struct {
}

func (UnimplementedBlogMicroserviceServer) FindBlogById(context.Context, *BlogIdRequest) (*BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBlogById not implemented")
}
func (UnimplementedBlogMicroserviceServer) CreateBlog(context.Context, *BlogCreationRequest) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBlogMicroserviceServer) CreateComment(context.Context, *CommentCreationRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedBlogMicroserviceServer) UpdateComment(context.Context, *CommentUpdateRequest) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedBlogMicroserviceServer) DeleteComment(context.Context, *CommentIdRequest) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedBlogMicroserviceServer) GetAllComments(context.Context, *Empty) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (UnimplementedBlogMicroserviceServer) GetAllBlogComments(context.Context, *BlogIdRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlogComments not implemented")
}
func (UnimplementedBlogMicroserviceServer) mustEmbedUnimplementedBlogMicroserviceServer() {}

// UnsafeBlogMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogMicroserviceServer will
// result in compilation errors.
type UnsafeBlogMicroserviceServer interface {
	mustEmbedUnimplementedBlogMicroserviceServer()
}

func RegisterBlogMicroserviceServer(s grpc.ServiceRegistrar, srv BlogMicroserviceServer) {
	s.RegisterService(&BlogMicroservice_ServiceDesc, srv)
}

func _BlogMicroservice_FindBlogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogMicroserviceServer).FindBlogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogMicroservice_FindBlogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogMicroserviceServer).FindBlogById(ctx, req.(*BlogIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogMicroservice_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogMicroserviceServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogMicroservice_CreateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogMicroserviceServer).CreateBlog(ctx, req.(*BlogCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogMicroservice_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogMicroserviceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogMicroservice_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogMicroserviceServer).CreateComment(ctx, req.(*CommentCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogMicroservice_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogMicroserviceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogMicroservice_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogMicroserviceServer).UpdateComment(ctx, req.(*CommentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogMicroservice_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogMicroserviceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogMicroservice_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogMicroserviceServer).DeleteComment(ctx, req.(*CommentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogMicroservice_GetAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogMicroserviceServer).GetAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogMicroservice_GetAllComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogMicroserviceServer).GetAllComments(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogMicroservice_GetAllBlogComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogMicroserviceServer).GetAllBlogComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogMicroservice_GetAllBlogComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogMicroserviceServer).GetAllBlogComments(ctx, req.(*BlogIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogMicroservice_ServiceDesc is the grpc.ServiceDesc for BlogMicroservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogMicroservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.BlogMicroservice",
	HandlerType: (*BlogMicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindBlogById",
			Handler:    _BlogMicroservice_FindBlogById_Handler,
		},
		{
			MethodName: "CreateBlog",
			Handler:    _BlogMicroservice_CreateBlog_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _BlogMicroservice_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _BlogMicroservice_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _BlogMicroservice_DeleteComment_Handler,
		},
		{
			MethodName: "GetAllComments",
			Handler:    _BlogMicroservice_GetAllComments_Handler,
		},
		{
			MethodName: "GetAllBlogComments",
			Handler:    _BlogMicroservice_GetAllBlogComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogMicroservice.proto",
}
